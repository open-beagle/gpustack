From c5b099918e3c46e4b6342402f199c24a03e65fdb Mon Sep 17 00:00:00 2001
From: gaoshiyao <gaoshiyao@wodcloud.com>
Date: Fri, 3 Jan 2025 15:19:55 +0800
Subject: [PATCH] s3

---
 gpustack/cmd/start.py            | 21 ++++++++++++++++++
 gpustack/config/config.py        |  3 +++
 gpustack/worker/backends/base.py | 37 ++++++++++++++++++++++++++++++--
 3 files changed, 59 insertions(+), 2 deletions(-)

diff --git a/gpustack/cmd/start.py b/gpustack/cmd/start.py
index 36aadcf..089d4bc 100644
--- a/gpustack/cmd/start.py
+++ b/gpustack/cmd/start.py
@@ -228,6 +228,24 @@ def setup_start_cmd(subparsers: argparse._SubParsersAction):
         help="Base URL to download dependency tools.",
         default=get_gpustack_env("TOOLS_DOWNLOAD_BASE_URL"),
     )
+    group.add_argument(
+        "--s3-url",
+        type=str,
+        help="URL to s3.",
+        default=get_gpustack_env("S3_URL"),
+    )
+    group.add_argument(
+        "--s3-access-key",
+        type=str,
+        help="AccessKey to s3.",
+        default=get_gpustack_env("S3_ACCESS_KEY"),
+    )
+    group.add_argument(
+        "--s3-secret-key",
+        type=str,
+        help="SecretKey to s3.",
+        default=get_gpustack_env("S3_SECRET_KEY"),
+    )
 
     parser_server.set_defaults(func=run)
 
@@ -306,6 +324,9 @@ def set_common_options(args, config_data: dict):
         "pipx_path",
         "token",
         "huggingface_token",
+        "s3_url",
+        "s3_access_key",
+        "s3_secret_key",
     ]
 
     for option in options:
diff --git a/gpustack/config/config.py b/gpustack/config/config.py
index 6b49d8b..0f0b0ce 100644
--- a/gpustack/config/config.py
+++ b/gpustack/config/config.py
@@ -87,6 +87,9 @@ class Config(BaseSettings):
     resources: Optional[dict] = None
     bin_dir: Optional[str] = None
     pipx_path: Optional[str] = None
+    s3_url: Optional[str] = ""
+    s3_access_key: Optional[str] = ""
+    s3_secret_key: Optional[str] = ""
 
     def __init__(self, **values):
         super().__init__(**values)
diff --git a/gpustack/worker/backends/base.py b/gpustack/worker/backends/base.py
index e5e8d19..0570c5a 100644
--- a/gpustack/worker/backends/base.py
+++ b/gpustack/worker/backends/base.py
@@ -26,8 +26,12 @@ from gpustack.worker.downloaders import (
 )
 from gpustack.worker.tools_manager import ToolsManager
 
+from minio import Minio
+from minio.error import S3Error
+
 logger = logging.getLogger(__name__)
 lock = threading.Lock()
+s3Client = None
 
 ACCELERATOR_VENDOR_TO_ENV_NAME = {
     VendorEnum.NVIDIA: "CUDA_VISIBLE_DEVICES",
@@ -94,7 +98,27 @@ def download_model(
             cache_dir=os.path.join(cache_dir, "model_scope"),
         )
     elif mi.source == SourceEnum.LOCAL_PATH:
-        return mi.local_path
+        if 'beagle_wind' in mi.local_path:
+            parts = mi.local_path.split('/')
+            bucket_name = parts[6]
+            object_path = '/'.join(parts[7:])
+            if not os.path.exists(mi.local_path):
+                os.makedirs(mi.local_path)
+            try:
+                objects = s3Client.list_objects(
+                    bucket_name, prefix=object_path, recursive=True
+                )
+                for obj in objects:
+                    local_file_path = os.path.join(
+                        mi.local_path, obj.object_name[len(object_path) :].lstrip('/')
+                    )
+                    os.makedirs(os.path.dirname(local_file_path), exist_ok=True)
+                    s3Client.fget_object(bucket_name, obj.object_name, local_file_path)
+                    print(f"Downloaded '{obj.object_name}' to '{local_file_path}'")
+            except S3Error as e:
+                print(f"Error occurred: {e}")
+        else:
+            return mi.local_path
 
 
 def get_model_file_size(mi: ModelInstance, cfg: Config) -> Optional[int]:
@@ -149,7 +173,7 @@ class InferenceServer(ABC):
         # for download progress update frequency control
         self._last_download_update_time = time.time()
         self.hijack_tqdm_progress()
-
+        self.init_s3_client(cfg)
         self._clientset = clientset
         self._model_instance = mi
         self._config = cfg
@@ -322,6 +346,15 @@ class InferenceServer(ABC):
             # TODO: support more.
             return None
 
+    def init_s3_client(self, cfg):
+        global s3Client  # 声明使用全局变量
+        s3Client = Minio(
+            cfg.s3_url,
+            access_key=cfg.s3_access_key,
+            secret_key=cfg.s3_secret_key,
+            secure=True,
+        )
+
 
 def get_env_name_by_vendor(vendor: str) -> str:
     env_name = next(
-- 
2.34.1
